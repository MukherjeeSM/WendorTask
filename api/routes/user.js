const express =  require ('express');
const router = express.Router();
const User = require('../models/user');
const bcrypt = require('bcrypt');
const mongoose=require('mongoose');
const jwt = require('jsonwebtoken');


//user sign up
router.post('/signup', (req,res,next) =>{
	//checking for already existing mail
	User.find({email: req.body.email}).exec()
	.then(user =>{
		//mail already exists
		if(user.length>=1){
			return res.status(409).json({
				message: "User exists!"
			});
		} 
		//mail doesn't exist
		else
		{
			//encrypting the password given by user
			bcrypt.hash(req.body.password, 10, (err,hash) => {
				if(err){
					return res.status(500).json({
						error: err
					});
				}  
				else {
						const user = new User({
						_id: new mongoose.Types.ObjectId(),
						email: req.body.email,
						password: hash
						});
						user.save().then(result => {
							console.log(result);
							res.status(201).json({
							message: 'User created'
							});
						}). catch(err =>{
							console.log(err);
							res.status(500).json({
							error: err
							});
						});
				}
		    });	
		}

	})
	.catch(err => {
		console.log(err);
		res.status(500).json({
		error: err
		});
	});
		
});

// user login route
router.post('/login',(req,res,next)=>{
	User.find({email: req.body.email})
	.exec()
	//if user is with the email exist
	.then( user=> {
		if(user.length<1) {    //if no user with the email
			return res.status(401).json({
			message: 'Authorization failed'
			});
		}
		//if a single user exists with that email then comparing the password with the hash generated by bcrypt
		bcrypt.compare(req.body.password, user[0].password, (err,result)=>{
			if(err){
				return res.status(401).json({
					message: 'Authorization failed'
					});
				}
			if(result){
				//if password is matched then assigning jwt token.
				const token = jwt.sign(
					{
					email: user[0].email, 
					userId: user[0]._id
					},
				 	"secret",
				 	{
				 		expiresIn: "1h"
				 	}
				 );
				return res.status(200).json({
					message: 'Authorization successfull',
					token: token
				});
			}

			res.status(200).json({
			message: 'Authorization failed'
			});
		})
		
	})
	.catch(err => {
		console.log(err);
			res.status(500).json({
			error: err
		});
	});
});

// deleting a user route
router.delete('/:userId', (req,res,next)=>{
	User.findByIdAndRemove({_id: req.params.userId})
	.exec()
	.then(function(user){
		res.status(200).json({
			message: "User deleted!",
			user: user
		});
	})
	.catch(err=>{
			console.log(err);
			res.status(500).json({
			error: err
		});
	});
});


module.exports = router;